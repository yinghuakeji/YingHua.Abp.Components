@using Volo.Abp.Localization
@using System.Globalization
@using System.Collections.Immutable
@inject ILanguageProvider LanguageProvider
@inject IJSRuntime JsRuntime

@if (_otherLanguages != null && _otherLanguages.Any())
{
    <ToolbarItem Align="ItemAlign.Right" Type="ItemType.Input">
        <Template>
            <SfDropDownList @ref="@Drop" TValue="string" TItem="LanguageInfo"
                            @bind-Value="@UiCultureName" DataSource="@_otherLanguages">
                <DropDownListFieldSettings Text="DisplayName" Value="UiCultureName"></DropDownListFieldSettings>
                <DropDownListEvents TItem="LanguageInfo" TValue="string" ValueChange="OnSelected"></DropDownListEvents>
            </SfDropDownList>
        </Template>
    </ToolbarItem>
}
@code {


    public string UiCultureName { get; set; }
    private IReadOnlyList<LanguageInfo> _otherLanguages = new List<LanguageInfo>();
    private LanguageInfo _currentLanguage;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var selectedLanguageName = await JsRuntime.InvokeAsync<string>(
            "localStorage.getItem",
            "Abp.SelectedLanguage"
            );

        _otherLanguages = await LanguageProvider.GetLanguagesAsync();

        if (!_otherLanguages.Any())
        {
            return;
        }

        if (!selectedLanguageName.IsNullOrWhiteSpace())
        {
            _currentLanguage = _otherLanguages.FirstOrDefault(l => l.UiCultureName == selectedLanguageName);
        }

        if (_currentLanguage == null)
        {
            _currentLanguage = _otherLanguages.FirstOrDefault(l => l.UiCultureName == CultureInfo.CurrentUICulture.Name);
        }

        if (_currentLanguage == null)
        {
            _currentLanguage = _otherLanguages.FirstOrDefault();
        }
        UiCultureName = _currentLanguage.UiCultureName;
    }

    private async Task ChangeLanguageAsync(string uiCultureName)
    {
        await JsRuntime.InvokeVoidAsync(
            "localStorage.setItem",
            "Abp.SelectedLanguage", uiCultureName
            );

        await JsRuntime.InvokeVoidAsync("location.reload");
    }


    private async void OnSelected(ChangeEventArgs<string, LanguageInfo> obj)
    {
        this.UiCultureName = obj.Value;
        await this.ChangeLanguageAsync(obj.Value);
    }

    public SfDropDownList<string, LanguageInfo> Drop { get; set; }

}