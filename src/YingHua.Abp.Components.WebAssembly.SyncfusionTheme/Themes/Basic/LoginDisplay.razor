@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Localization
@using Syncfusion.Blazor.SplitButtons
@using Volo.Abp.Users
@using Volo.Abp.MultiTenancy
@using global::Localization.Resources.AbpUi
@inject ICurrentUser CurrentUser
@inject ICurrentTenant CurrentTenant
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject IStringLocalizer<AbpUiResource> UiLocalizer
<AuthorizeView>
    <Authorized>
        <SfDropDownButton Content="@Name" IconCss="e-ddb-icons e-profile">
            <DropDownMenuItems>

                @if (Menu != null)
                {
                    @foreach (var menuItem in Menu.Items)
                    {
                        <DropDownMenuItem @onclick="@(() => NavigateToAsync(menuItem.Url, menuItem.Target))" Text="@menuItem.DisplayName" />
                    }
                }
            </DropDownMenuItems>
            <DropDownMenuItems>
                <DropDownMenuItem @onclick="BeginSignOut" Text="@UiLocalizer["Logout"]" IconCss="e-ddb-icons e-logout" />
            </DropDownMenuItems>
        </SfDropDownButton>
    </Authorized>
    <NotAuthorized>
        <a class="nav-link" href="authentication/login">@UiLocalizer["Login"]</a>
    </NotAuthorized>
</AuthorizeView>
@code{
    public string Name { get; set; }
    protected override void OnInitialized()
    {
        if (CurrentTenant.Name != null)
        {
            Name = $"{CurrentTenant.Name} {CurrentUser.UserName}";
        }
        else
        {
            Name = CurrentUser.UserName;
        }
        base.OnInitialized();
    }
    private async Task NavigateToAsync(string uri, string target = null)
    {
        if (target == "_blank")
        {
            await JsRuntime.InvokeVoidAsync("open", uri, target);
        }
        else
        {
            Navigation.NavigateTo(uri);
        }
    }

    private async Task BeginSignOut()
    {
        await SignOutManager.SetSignOutState();
        await NavigateToAsync("authentication/logout");
    }
}
